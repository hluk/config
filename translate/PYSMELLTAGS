{'CLASSES': {'HTMLParser.HTMLParseError': {'bases': ['Exception'],
                                           'constructor': ['msg', 'position=(None, None)'],
                                           'docstring': 'Exception raised for all parse errors.',
                                           'methods': [('__str__', [], '')],
                                           'properties': ['msg', 'lineno', 'offset']},
             'HTMLParser.HTMLParser': {'bases': ['markupbase.ParserBase'],
                                       'constructor': [],
                                       'docstring': 'Find tags and other markup and call handler functions.\n\n    Usage:\n        p = HTMLParser()\n        p.feed(data)\n        ...\n        p.close()\n\n    Start tags are handled by calling self.handle_starttag() or\n    self.handle_startendtag(); end tags by self.handle_endtag().  The\n    data between tags is passed from the parser to the derived class\n    by calling self.handle_data() with the data as argument (the data\n    may be split up in arbitrary chunks).  Entity references are\n    passed by calling self.handle_entityref() with the entity\n    reference as the argument.  Numeric character references are\n    passed to self.handle_charref() with the string containing the\n    reference as the argument.\n    ',
                                       'methods': [('reset',
                                                    [],
                                                    'Reset this instance.  Loses all unprocessed data.'),
                                                   ('feed',
                                                    ['data'],
                                                    "Feed data to the parser.\n\n        Call this as often as you want, with as little or as much text\n        as you want (may include '\n').\n        "),
                                                   ('close', [], 'Handle any buffered data.'),
                                                   ('error', ['message'], ''),
                                                   ('get_starttag_text',
                                                    [],
                                                    "Return full source of start tag: '<...>'."),
                                                   ('set_cdata_mode', [], ''),
                                                   ('clear_cdata_mode', [], ''),
                                                   ('goahead', ['end'], ''),
                                                   ('parse_pi', ['i'], ''),
                                                   ('parse_starttag', ['i'], ''),
                                                   ('check_for_whole_start_tag', ['i'], ''),
                                                   ('parse_endtag', ['i'], ''),
                                                   ('handle_startendtag', ['tag', 'attrs'], ''),
                                                   ('handle_starttag', ['tag', 'attrs'], ''),
                                                   ('handle_endtag', ['tag'], ''),
                                                   ('handle_charref', ['name'], ''),
                                                   ('handle_entityref', ['name'], ''),
                                                   ('handle_data', ['data'], ''),
                                                   ('handle_comment', ['data'], ''),
                                                   ('handle_decl', ['decl'], ''),
                                                   ('handle_pi', ['data'], ''),
                                                   ('unknown_decl', ['data'], ''),
                                                   ('unescape', ['s'], '')],
                                       'properties': ['CDATA_CONTENT_ELEMENTS',
                                                      'rawdata',
                                                      'lasttag',
                                                      'interesting',
                                                      '__starttag_text',
                                                      'entitydefs']},
             'translate.GoogleParser': {'bases': ['HTMLParser.HTMLParser'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('handle_starttag', ['tag', 'attrs'], ''),
                                                    ('handle_endtag', ['tag'], ''),
                                                    ('handle_data', ['data'], '')],
                                        'properties': ['inResult']},
             'translate.SeznamParser': {'bases': ['HTMLParser.HTMLParser'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('handle_starttag', ['tag', 'attrs'], ''),
                                                    ('handle_endtag', ['tag'], ''),
                                                    ('handle_data', ['data'], '')],
                                        'properties': ['inContent',
                                                       'inWords',
                                                       'inCollocations',
                                                       'inWord',
                                                       'inTranslated',
                                                       'word']}},
 'CONSTANTS': ['HTMLParser.interesting_normal',
               'HTMLParser.interesting_cdata',
               'HTMLParser.incomplete',
               'HTMLParser.entityref',
               'HTMLParser.charref',
               'HTMLParser.starttagopen',
               'HTMLParser.piclose',
               'HTMLParser.commentclose',
               'HTMLParser.tagfind',
               'HTMLParser.attrfind',
               'HTMLParser.locatestarttagend',
               'HTMLParser.endendtag',
               'HTMLParser.endtagfind',
               'translate.parser',
               'translate.opts',
               'translate.args'],
 'FUNCTIONS': [('translate.translateWords', ['lang_from', 'lang_to', 'words'], ''),
               ('translate.translateSentence', ['lang_from', 'lang_to'], '')],
 'HIERARCHY': ['HTMLParser', 'compile', 'translate'],
 'POINTERS': {'HTMLParser.htmlentitydefs': 'htmlentitydefs',
              'HTMLParser.markupbase': 'markupbase',
              'HTMLParser.re': 're',
              'compile.compile': 'py_compile.compile',
              'translate.HTMLParser': 'HTMLParser',
              'translate.OptionParser': 'optparse.OptionParser',
              'translate.re': 're',
              'translate.sys': 'sys',
              'translate.urllib2': 'urllib2'}}
